import java.util.*;
import java.math.*;
public class test {
	public static void main(String[] args) {
		
	int input1[]= {74,56,15,71,92,-23};
 	int input2=6;
 	int[] newinput=new int[input2];
 	for(int k=0;k<input2;k++)
 	{
 	  newinput[k]=input1[k];	
 	}
 	Arrays.sort(newinput);
 	if(newinput[0]>0)
 	{
 		System.out.print(newinput[input2-1]);
 	}
 	else
 	{
 		//System.out.print(newinput);	
 	List<Integer> l = new ArrayList<Integer>();
    for(int i=0;i<input2;)
    {
    	int c=key(input1[i]);
    	if(c>0)
    	{
    		l.add(c);
    		i=address(input1[i]);
    	}
    	else 
    	{int num=Math.abs(input1[i]);
    	 l.add(key(num));
    	 break;    	
    	}
        }
    System.out.println(l);
    int sum=l.get(0);
    for(int j=1;j<l.size();j++)
    {
    	sum=(int) (sum+Math.pow((-1),(j+1))*l.get(j));
    	System.out.println(sum);
    }
 	}
   
}
	static int key(int a)
	{
		
		int b=0;
		while(a>0)
		{
			b=a%10;
			a=a/10;	
		}
		return b;
	}
	static int address(int d)
	{
		int length=0;
		int e=d;
		while(e>0)
		{
			length++;
			e=e/10;	
		}
		int last=(int) (d%(Math.pow(10, length-1)));
		return last;
	}
	
}

public class PasswordGen
{
public static void main(String[] args)
{
String str1="WIPRO";      //middleadd
String str2="TECHNOLOGIES";

String spart1="",spart2="",spart3="";
String stpart1="",stpart2="",stpart3="";

int len1=str1.length();
int len2=str2.length();

int i=len1;
int j=len2;

if(i%3==0)
{
	spart1=str1.substring(0,i/3);
	spart2=str1.substring(i/3,2*i/3);
	spart3=str1.substring(2*i/3);
}
else if(i%3==1)
{
	spart1=str1.substring(0,i/3-1);
	spart2=str1.substring(i/3,2*i/3);
	spart3=str1.substring(2*i/3);
}
else
	{
		spart1=str1.substring(0,i/3);
		spart2=str1.substring(i/3,2*i/3);
		spart3=str1.substring(2*i/3+1);
	}

if(j%3==0)
{
	stpart1=str2.substring(0,j/3);
	stpart2=str2.substring(j/3,2*j/3);
	stpart3=str2.substring(2*j/3);
}
else if(j%3==1)
{
	stpart1=str2.substring(0,j/3-1);
	stpart2=str2.substring(j/3,2*j/3);
	stpart3=str2.substring(2*j/3);
}
else
	{
		stpart1=str2.substring(0,j/3);
		stpart2=str2.substring(j/3,2*j/3);
		stpart3=str2.substring(2*j/3+1);
	}

String Password = stpart1+spart1+spart3+stpart3;
System.out.println(Password);

}
}
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class TokenArray
{
	
public static void main(String[] args)
{
 //int input1=11;
 int input1=7;
// String []input2 = {"Priya","Rajesh","Abdul","Rahul","Preeti","Sanjay","Nidhi","Varun","Varsha","Basil","Asif"};	
// int []input3= {44,99,46,39,102,45,521,65,4,47,741};
String [] input2= {"aa","bb","cc","dd","ee","gg","hh"};
int []input3= {9,89,5,6,65,4,7};

 Map<Integer,String>  map= new HashMap<Integer,String>();
 for(int i=0;i<input3.length;i++)
 {
	 map.put(input3[i],input2[i]);
 }
    Arrays.sort(input3);
  
   boolean isFound=false;
   
   int track= -1;
   try
   {
	   for(int j=0;j<input3.length;j++)
	   {
		   if(input3[j+1]-input3[j]!=1)
		   {
			   continue;
		   }
		   if(input3[j+3]-input3[j+2] ==1 && input3[j+2]- input3[j+1]==1 && input3[j+1]-input3[j]==1)
		   {
			   isFound=true;
			   track=j;
			   break;
		   }
	   }
   }catch (Exception e) {}
   if(isFound)
   {
	   StringBuilder sb=new StringBuilder();
	   sb.append(map.get(input3[track]));
	   sb.append(":");
	   sb.append(map.get(input3[track+1]));
	   sb.append(":"); 
	   sb.append(map.get(input3[track+2]));
	   sb.append(":");
	   sb.append(map.get(input3[track+3]));
	   
	   System.out.println(sb.toString());
	 //  return sb.toString();
   }else System.out.println("NONE");
	 //  return "NONE";
}
}


class GenerateSeriesAndFindNthElement {

	public int seriesN(int input1,int input2,int input3,int input4){
		// Read only region end
		
		int gap1 = (input2 - input1);
		int gap2 = (input3 - input2);
		int output = input1;
			
		for (int i = 1; i < input4; i++) {
			if (i % 2 == 1)
				output += gap1;
			else
				output += gap2;
			
			System.out.print(output + ", ");
		}
		
		return output;
	}
}

class FindPasswordStableUnstable {

	public int findPassword(int input1,int input2,int input3,int input4,int input5){
		// Read only region end
		int sumOfStable = 0;
		int sumOfUnstable = 0;
		
		if (isStable(input1)) sumOfStable += input1;
		else sumOfUnstable += input1;
		
		if (isStable(input2)) sumOfStable += input2;
		else sumOfUnstable += input2;
		
		if (isStable(input3)) sumOfStable += input3;
		else sumOfUnstable += input3;
		
		if (isStable(input4)) sumOfStable += input4;
		else sumOfUnstable += input4;
		
		if (isStable(input5)) sumOfStable += input5;
		else sumOfUnstable += input5;
		
		System.out.println(sumOfStable + " :: " + sumOfUnstable);
		System.out.println("isStable: " + isStable(input1) + isStable(input2) + isStable(input3) + isStable(input4) + isStable(input5));
		
		return sumOfStable - sumOfUnstable;
	}
	
	public static boolean isStable(int num) {
		boolean isStable = true;
		int[] freq = new int[10];
		String numStr = String.valueOf(num);
		
		for (int i = 0; i < numStr.length(); i++) {
			freq[Integer.parseInt(String.valueOf(numStr.charAt(i)))]++;
		}
		
		System.out.println(Arrays.toString(freq));
		
		int firstFreq = 0;
		for (int i = 0; i < 10; i++) {
			if (freq[i] > 0) {
				firstFreq = freq[i];
				break;
			}
		}
		System.out.println("firstFreq: " + firstFreq);
		
		for (int i = 0; i < 10; i++) {
			if (freq[i] != 0 && freq[i] != firstFreq) {
				isStable = false;
				break;
			}
		}
		System.out.println("isStable: " + isStable);
		
		return isStable;
	}
}


